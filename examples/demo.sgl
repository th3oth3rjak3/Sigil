// Comprehensive Sigil Language Feature Demonstration
module graphics::demo;

// ===== MODULE IMPORTS =====
use std::collections;
use graphics::primitives as gfx;
use math::geometry;
use io::console as Console;
use std::sync::{channel, Sender, Receiver};

// ===== INTERFACE DECLARATIONS =====
interface Drawable {
    Draw() -> ();
    Area() -> Float;
}

interface Serializable[T] {
    Serialize() -> String;
    Deserialize(data: String) -> T;
}

// ===== ENUM DECLARATIONS (Go-style visibility) =====
enum Color {
    Red(),
    Green(), 
    Blue(),
    RGB(r: Int, g: Int, b: Int),
    HSV(Float, Float, Float)  // Unlabeled parameters
}

// Private enum (lowercase)
enum processingState {
    ready(),
    processing(), 
    done()
}

// ===== RESULT/OPTION TYPES FOR ERROR HANDLING =====
enum Result[T, E] {
    Ok(T),
    Err(E)
    
    fn IsOk() -> Bool {  // Public method (uppercase)
        match this {
            Result::Ok(_) => true,
            Result::Err(_) => false,
        }
    }
    
    fn unwrap() -> T {  // Private method (lowercase)
        match this {
            Result::Ok(value) => value,
            Result::Err(_) => panic("Called unwrap on an Err value"),
        }
    }
}

enum Option[T] {
    Some(T),
    None()
    
    fn IsSome() -> Bool {  // Public method
        match this {
            Option::Some(_) => true,
            Option::None() => false,
        }
    }
}

// ===== CLASS DECLARATIONS =====
class Shape : Drawable {
    Name: String;      // Public field (uppercase)
    Color: Color;      // Public field
    internalId: Int;   // Private field (lowercase)
    
    new(name: String, color: Color) {
        this.Name = name;
        this.Color = color;
        this.internalId = 0;
    }
    
    // Public methods (uppercase)
    Draw() -> () { /* Default implementation */ }
    Area() -> Float { return 0.0; }
    
    // Private method (lowercase)
    validate() -> Bool { return true; }
}

class Rectangle[T] : Shape, Serializable[Rectangle[T]] {
    Width: T;      // Public fields
    Height: T;
    
    new(name: String, color: Color, width: T, height: T) : super(name, color) {
        this.Width = width;
        this.Height = height;
    }
    
    Draw() -> () {
        Console::println($"Drawing {this.Name} rectangle");
    }
    
    Area() -> Float {
        return this.Width * this.Height;
    }
    
    Serialize() -> String {
        return $"Rectangle({this.Width}, {this.Height})";
    }
    
    Deserialize(data: String) -> Rectangle[T] {
        return this;  // Simplified
    }
    
    static CreateSquare(size: T) -> Rectangle[T] {  // Public static method
        return Rectangle::new("Square", Color::Blue(), size, size);
    }
}

// Private helper class (lowercase)
class shapeCache {
    data: Map[String, Shape];
    
    new() {
        this.data = Map::new();
    }
    
    optimize(shape: Shape) -> Shape {  // Private method
        return shape;
    }
}

// ===== FUNCTION DECLARATIONS =====
fn Add[T](a: T, b: T) -> T {  // Public function (uppercase)
    return a + b;
}

fn calculateMetrics() -> Float {  // Private function (lowercase)
    return 42.0;
}

// ===== TUPLE RETURN FUNCTIONS =====
fn DivideWithRemainder(a: Int, b: Int) -> (Int, Int) {  // Public
    return (a / b, a % b);
}

fn GetUserInfo(id: Int) -> (String, Int, Bool) {  // Public
    if id == 1 {
        return ("Alice", 30, true);
    } else {
        return ("Unknown", 0, false);
    }
}

fn parseIntSafe(s: String) -> (Int, Bool) {  // Private
    if s == "42" {
        return (42, true);
    } else {
        return (0, false);
    }
}

// ===== MAIN PROGRAM =====
fn Main() -> () {
    Console::println("=== Sigil Language Demo ===");
    
    // ===== BASIC VARIABLES =====
    let name: String = "Sigil Demo";
    let version: Float = 1.0;
    let isDemo: Bool = true;
    
    // String interpolation
    Console::println($"Welcome to {name} version {version}!");
    
    // ===== ENUM USAGE (Go-style visibility) =====
    let red: Color = Color::Red();                          // Public enum
    let customColor: Color = Color::RGB(r: 255, g: 128, b: 64);
    let state: processingState = processingState::ready();  // Private enum
    
    // ===== CLASS INSTANTIATION =====
    let rect: Rectangle[Float] = Rectangle::new("MyRect", red, 10.0, 5.0);
    let square: Rectangle[Float] = Rectangle::CreateSquare(7.0);  // Static method
    let cache: shapeCache = shapeCache::new();  // Private class
    
    // ===== METHOD CALLS (visibility clear at usage) =====
    rect.Draw();                    // Public method
    let area: Float = rect.Area();  // Public method
    let isValid: Bool = rect.validate();  // Private method (lowercase)
    
    Console::println($"Rectangle area: {area}");
    
    // ===== TUPLE DESTRUCTURING =====
    // Let destructuring
    let (quotient, remainder): (Int, Int) = DivideWithRemainder(17, 5);
    Console::println($"17 / 5 = {quotient} remainder {remainder}");
    
    // Assignment destructuring
    let q: Int = 0;
    let r: Int = 0;
    (q, r) = DivideWithRemainder(23, 7);
    Console::println($"23 / 7 = {q} remainder {r}");
    
    // Multiple return values
    let (userName, userAge, userActive): (String, Int, Bool) = GetUserInfo(1);
    Console::println($"User: {userName}, age {userAge}, active: {userActive}");
    
    // ===== GO-STYLE ERROR HANDLING =====
    let (value, ok): (Int, Bool) = parseIntSafe("42");
    if ok {
        Console::println($"Successfully parsed: {value}");
    } else {
        Console::println("Parse failed");
    }
    
    // ===== RESULT TYPE ERROR HANDLING =====
    let divResult: Result[Float, String] = SafeDivide(10.0, 2.0);
    match divResult {
        Result::Ok(val) => Console::println($"Division result: {val}"),
        Result::Err(err) => Console::println($"Error: {err}"),
    }
    
    // ===== PATTERN MATCHING =====
    let someValue: Option[Int] = Option::Some(42);
    let message: String = match someValue {
        Option::Some(val) => $"Got value: {val}",
        Option::None() => "No value",
    };
    Console::println(message);
    
    // Enum pattern matching
    match customColor {
        Color::Red() => Console::println("It's red!"),
        Color::RGB(r, g, b) => Console::println($"RGB color: ({r}, {g}, {b})"),
        _ => Console::println("Other color"),
    }
    
    // ===== ARRAYS AND COLLECTIONS =====
    let numbers: Array[Int] = [1, 2, 3, 4, 5];
    let colors: Array[Color] = [Color::Red(), Color::Green(), Color::Blue()];
    
    // Array indexing and tuple literals
    let firstNum: Int = numbers[0];
    let point: (Float, Float) = (10.0, 20.0);
    let (x, y): (Float, Float) = point;
    Console::println($"Point: ({x}, {y})");
    
    // ===== CONTROL FLOW =====
    // For loop
    for num in numbers {
        if num % 2 == 0 {
            Console::println($"{num} is even");
        } else {
            Console::println($"{num} is odd");
        }
    }
    
    // While loop
    let i: Int = 0;
    while i < 3 {
        Console::println($"Count: {i}");
        i = i + 1;
    }
    
    // ===== LAMBDA EXPRESSIONS =====
    let square: |Int| -> Int = |x: Int| x * x;
    let doubled: Int = square(5);
    Console::println($"5 squared = {doubled}");
    
    // ===== CONCURRENCY (Go-style) =====
    let (tx, rx) = channel[String](3);
    
    // Producer goroutine
    spawn {
        tx.send("Hello");
        tx.send("from");
        tx.send("goroutine!");
        tx.close();
    };
    
    // Consumer goroutine  
    spawn {
        while true {
            match rx.try_recv() {
                Option::Some(msg) => Console::println($"Received: {msg}"),
                Option::None() => break,
            }
        }
    };
    
    // ===== GENERIC FUNCTIONS =====
    let sumInt: Int = Add[Int](5, 3);
    let sumFloat: Float = Add[Float](2.5, 1.5);
    Console::println($"Generic addition: {sumInt}, {sumFloat}");
    
    // ===== ARITHMETIC AND LOGICAL OPERATIONS =====
    let calculation: Float = (area + 20.0) * 2.0 - 10.0 / 2.0;
    let remainder: Int = 17 % 5;
    let isGreater: Bool = area > 50.0;
    let complexCondition: Bool = isDemo && (area > 30.0 || remainder == 2);
    
    if complexCondition {
        Console::println("Complex condition satisfied!");
    }
    
    Console::println("Demo completed successfully!");
}

// Helper function for demo
fn SafeDivide(a: Float, b: Float) -> Result[Float, String] {
    if b == 0.0 {
        return Result::Err("Division by zero");
    } else {
        return Result::Ok(a / b);
    }
}