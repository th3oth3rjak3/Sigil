class Rectangle {
    length: Float
    width: Float

    new(length: Float, width: Float) {
        this.length = length
        this.width = width
    }

    area() -> Float {
        this.length * this.width
    }
}

enum Shape {
    Rectangle(Rectangle),               // The variant can have a class as the inner type.
    Square(Int),                        // The variant can also just have primitives
    Triangle(base: Int, height: Int)    // We can also label the inputs.

    area() -> Float {
        match this {
            Rectangle(rect) => rect.area(),
            Square(side) => side * side,
            Triangle(base, height) => (base / 2) * height,
        }
    }
}

// Usage
let some_shape = Shape.Rectangle(Rectangle(2.3, 2.4))
// Or
let some_shape = Shape.Rectangle(2.3, 2.4)
print($"The area is: {some_shape.area()}")

// Inference
let rect = Rectangle(1.2, 3.4)                  // inferred to be a rectangle and has the rectangle class methods
let shape = Shape.Rectangle(rect)               // inferred to be shape, uses values from the rectangle, but creates a clone
let simpler_shape = Shape.Rectangle(1.2, 3.4)   // Create a new shape that is a rectangle variant, only using constructor params for the Rectangle class.